package l2tp

import (
	"bytes"
	"reflect"
	"testing"
)

// Tests can ONLY be run on Little Endian architectures.

func TestSessionMessageMarshalBinary(t *testing.T) {
	tests := []struct {
		name string
		m    Message
		b    []byte
		err  error
	}{
		{
			name: "empty",
			m:    &SessionMessage{},
			b:    []byte{},
		},
		{
			name: "session message",
			m: &SessionMessage{
				Ifname:        Ifname("Iterface03"),
				ConnId:        ID(6),
				SessionId:     ID(9),
				PeerSessionId: ID(10),
			},
			b: []byte{
				0x08, 0x00, 0x09, 0x00, 0x06, 0x00, 0x00, 0x00,
				0x08, 0x00, 0x0b, 0x00, 0x09, 0x00, 0x00, 0x00,
				0x08, 0x00, 0x0c, 0x00, 0x0a, 0x00, 0x00, 0x00,
				0x0f, 0x00, 0x08, 0x00, 0x49, 0x74, 0x65, 0x72,
				0x66, 0x61, 0x63, 0x65, 0x30, 0x33, 0x00, 0x00,
			},
		},
		{
			name: "all attr session message",
			m: &SessionMessage{
				PwType:        PwType(L2TP_PWTYPE_ETH),
				Ifname:        Ifname(string([]byte{0x4d, 0x79, 0x57, 0x69, 0x66, 0x65, 0x49, 0x73, 0x48, 0x6f, 0x74})),
				ConnId:        ID(293842),
				PeerConnId:    ID(3928028),
				SessionId:     ID(9283),
				PeerSessionId: ID(491884),
				RecvSeq:       RecvSeq(128),
				SendSeq:       SendSeq(129),
				LnsMode:       LnsMode(234),
			},
			b: []byte{
				0x06, 0x00, 0x01, 0x00, 0x05, 0x00, 0x00, 0x00,
				0x08, 0x00, 0x09, 0x00, 0xd2, 0x7b, 0x04, 0x00,
				0x08, 0x00, 0x0a, 0x00, 0xdc, 0xef, 0x3b, 0x00,
				0x08, 0x00, 0x0b, 0x00, 0x43, 0x24, 0x00, 0x00,
				0x08, 0x00, 0x0c, 0x00, 0x6c, 0x81, 0x07, 0x00,
				0x05, 0x00, 0x12, 0x00, 0x80, 0x00, 0x00, 0x00,
				0x05, 0x00, 0x13, 0x00, 0x81, 0x00, 0x00, 0x00,
				0x05, 0x00, 0x14, 0x00, 0xea, 0x00, 0x00, 0x00,
				0x10, 0x00, 0x08, 0x00, 0x4d, 0x79, 0x57, 0x69,
				0x66, 0x65, 0x49, 0x73, 0x48, 0x6f, 0x74, 0x00,
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			b, err := tt.m.MarshalBinary()

			if want, got := tt.err, err; want != got {
				t.Fatalf("unexpected error:\n- want: %v\n-  got: %v", want, got)
			}
			if err != nil {
				return
			}

			if want, got := tt.b, b; !bytes.Equal(want, got) {
				t.Fatalf("unexpected Message bytes:\n- want: [%# x]\n-  got: [%# x]", want, got)
			}
		})
	}
}

func TestSessionMessageUnmarshalBinary(t *testing.T) {
	tests := []struct {
		name string
		b    []byte
		m    Message
		err  error
	}{
		{
			name: "data",
			b: []byte{
				0x06, 0x00, 0x01, 0x00, 0x05, 0x00, 0x00, 0x00,
				0x08, 0x00, 0x09, 0x00, 0xd2, 0x7b, 0x04, 0x00,
				0x08, 0x00, 0x0a, 0x00, 0xdc, 0xef, 0x3b, 0x00,
				0x08, 0x00, 0x0b, 0x00, 0x43, 0x24, 0x00, 0x00,
				0x08, 0x00, 0x0c, 0x00, 0x6c, 0x81, 0x07, 0x00,
				0x05, 0x00, 0x12, 0x00, 0x80, 0x00, 0x00, 0x00,
				0x05, 0x00, 0x13, 0x00, 0x81, 0x00, 0x00, 0x00,
				0x05, 0x00, 0x14, 0x00, 0xea, 0x00, 0x00, 0x00,
				0x10, 0x00, 0x08, 0x00, 0x4d, 0x79, 0x57, 0x69,
				0x66, 0x65, 0x49, 0x73, 0x48, 0x6f, 0x74, 0x00,
			},
			m: &SessionMessage{
				PwType:        PwType(L2TP_PWTYPE_ETH),
				Ifname:        Ifname(string([]byte{0x4d, 0x79, 0x57, 0x69, 0x66, 0x65, 0x49, 0x73, 0x48, 0x6f, 0x74})),
				ConnId:        ID(293842),
				PeerConnId:    ID(3928028),
				SessionId:     ID(9283),
				PeerSessionId: ID(491884),
				RecvSeq:       RecvSeq(128),
				SendSeq:       SendSeq(129),
				LnsMode:       LnsMode(234),
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			m := &SessionMessage{}
			err := (m).UnmarshalBinary(tt.b)

			if want, got := tt.err, err; want != got {
				t.Fatalf("unexpected error:\n- want: %v\n-  got: %v", want, got)
			}
			if err != nil {
				return
			}

			if want, got := tt.m, m; !reflect.DeepEqual(want, got) {
				t.Fatalf("unexpected Message:\n- want: %#v\n-  got: %#v", want, got)
			}
		})
	}
}
